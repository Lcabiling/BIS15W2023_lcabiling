```{r setup, include=FALSE}
library("tidyverse")
library("janitor")
ecosphere <- readr::read.csv("data/ecs21351-sup-0003-SupplementS1.csv")
ecosphere <- read.csv("data/ecs21351-sup-0003-SupplementS1.csv")
names(ecosphere)
ecosphere <- read.csv("data/ecs21351-sup-0003-SupplementS1.csv", skip == 2)
ecosphere <- read.csv("data/ecs21351-sup-0003-SupplementS1.csv", skip =2)
names(ecosphere)
glimpse(ecosphere)
ecosphere %>%
filter(veggie, omni, insecivor, nectar)
table(ecosphere$Diet)
ecosphere %>%
select(family, diet)
ecosphere %>%
filter(family, diet)
ecosphere %>%
filter(diet == "Vegitation")
ecosphere %>%
filter(diet == "Vegetation")
ecosphere %>%
filter(Diet == "Vegetation")
ecosphere <- ecosphere %>%  clean_names()
glimpse(ecosphere)
ecosphere %>%
tabyl (diet)
ecosphere %>%
tabyl (diet) %>%
arrange(desc(n))
ecosphere %>%
filter(diet == "Vegetation")
ecosphere %>%
filter(diet == "Vegetation") %>%
select(familym, diet)
ecosphere %>%
filter(diet == "Vegetation") %>%
select(family, diet)
ecosphere %>%
filter(diet == "Vegetation") %>%
select(family, diet) %>%
tabyl(diet)
## Load the tidyverse and janitor
```{r message=FALSE, warning=FALSE}
library("tidyverse")
library("janitor")
library("tidyverse")
library("janitor")
install.packages("skimr")
library("skimr")
#install.packages("skimr")
library("skimr")
#install.packages("skimr")
library("skimr")
names(msleep)
library("palmerpenguins")
palmerpenguins::penguins_raw
names(msleep)
arrange(desc(sleep_total_24))
msleep %>%
msleep %>%
mutate(sleep_total_24 = sleep_total/24) %>%
select(name, vore, sleep_total_24) %>%
filter(!is.na(vore)) %>%
filter(sleep_total_24 <= 0.3) %>%
arrange(desc(sleep_total_24))
?msleep
names(msleep)
msleep %>%
mutate(sleep_total_24 = sleep_total/24) %>%
select(name, vore, sleep_total_24) %>%
filter(!is.na(vore)) %>%
filter(sleep_total_24 <= 0.3) %>%
arrange(desc(sleep_total_24))
summary(msleep24)
msleep24 <- msleep %>%
mutate(sleep_total_24 = sleep_total/24) %>%
select(name, vore, sleep_total_24) %>%
filter(!is.na(vore)) %>%  #removing NAs from a variable
filter(sleep_total_24 <= 0.3) %>%
arrange(desc(sleep_total_24))
summary(msleep24)
skim(msleep24)
hist(msleep24$sleep_total_24)
msleep24 %>%
tabyl(vore) %>%
adorn_pct_formatting(digits=1)
skim(vore)
skim(msleep$vore)
names(msleep)
msleep %>%
select(name,order,vore)
msleep %>%
filter(carni&herbi)
glimpse(msleep)
msleep %>%
tabyl(vore)
msleep %>%
tabyl(vore, order)
head(msleep)
large <-
msleep %>%
select(name, genus, bodywt, sleep_total) %>%
filter(bodywt > 200) %>%
arrange(desc(bodywt))
large
mean(large$sleep_total)
msleep %>%
filter(bodywt > 200) %>% #large mammals
summarize(mean_sleep_lg = mean(sleep_total))
msleep %>%
filter(bodywt > 200) %>%
summarize(mean_sleep_lg = mean(sleep_total),
min_sleep_lg = min(sleep_total),
max_sleep_lg = max(sleep_total),
total = n())
names(msleep)
msleep %>%
filter(order == "Primate") %>%
summarize(mean_bodywt_prim = mean(bodywt),
min_bodywt_prim = min(bodywt),
max_bodywt_prim = max(bodywt),
total = n())
msleep %>%
filter(order == "Primate") %>%
summarize(mean_bodywt_prim = mean(bodywt),
min_bodywt_prim = min(bodywt),
max_bodywt_prim = max(bodywt),
total = n())
msleep %>%
filter(order == "Primate")
msleep %>%
filter(order == "Primates")
summarize(mean_bodywt_prim = mean(bodywt),
min_bodywt_prim = min(bodywt),
max_bodywt_prim = max(bodywt),
total = n())
## Practice
1. What is the mean, min, and max `bodywt` for the taxonomic order Primates? Provide the total number of observations.
msleep %>%
filter(order == "Primates")
msleep %>%
filter(order == "Primates")
summarize(mean_bodywt_prim = mean(bodywt),
min_bodywt_prim = min(bodywt),
max_bodywt_prim = max(bodywt),
total = n())
msleep %>%
filter(order == "Primates") %>%
summarize(mean_bodywt_prim = mean(bodywt),
min_bodywt_prim = min(bodywt),
max_bodywt_prim = max(bodywt),
total = n())
msleep %>%
filter(bodywt > 100)
msleep %>%
filter(bodywt > 100) %>%
summarise(n_genera=n_distinct(genus))
msleep %>%
summarise(n_genera = n_distinct(genus))
names(mammals)
names(msleep)
glimpse(msleep)
msleep %>%
filter(order == "mammals") %>%
summarize(mean_sleep_lg = mean(sleep_total),
min_sleep_lg = min(sleep_total),
max_sleep_lg = max(sleep_total),
total = n())
msleep %>%
filter(order == "mammal") %>%
summarize(mean_sleep_lg = mean(sleep_total),
min_sleep_lg = min(sleep_total),
max_sleep_lg = max(sleep_total),
total = n())
tabyl(msleep$order)
msleep %>%
summarize(mean_sleep_lg = mean(sleep_total),
min_sleep_lg = min(sleep_total),
max_sleep_lg = max(sleep_total),
total = n())
n_distinct(msleep$genus)
msleep %>%
group_by(vore) %>% #we are grouping by feeding ecology, a categorical variable
summarize(min_bodywt = min(bodywt),
max_bodywt = max(bodywt),
mean_bodywt = mean(bodywt),
total=n())
msleep %>%
group_by(order) %>%
summarise(mean_brainwt = mean(brainwt))
msleep %>%
group_by(order) %>%
summarise(mean_brainwt = mean(brainwt), rm.na())
msleep %>%
group_by(order) %>%
summarise(mean_brainwt = mean(brainwt), rm.na(T))
msleep %>%
group_by(order) %>%
summarise(mean_brainwt = mean(brainwt), rm.na = T)
msleep %>%
group_by(order) %>%
summarise(mean_brainwt = mean(brainwt))
msleep %>%
group_by(order) %>%
summarise(mean_brainwt = mean(brainwt, rm.na()))
msleep %>%
group_by(order) %>%
summarise(mean_brainwt = mean(brainwt, rm.na=T))
msleep %>%
group_by(order) %>%
summarise(mean_brainwt = mean(brainwt, na.rm=TRUE))
# NA means data are not available, and they are being treated as the whole order does not have any data on it.
msleep %>%
filter(order == "Carnivora") %>%
select(order, genus, brainwt)
msleep %>%
filter(order == "Cetacea") %>%
select(order, genus, brainwt)
library("tidyverse")
library("janitor")
library("skimr")
library("palmerpenguins")
glimpse(penguins)
penguins %>%
group_by(island) %>%
summarize(mean_bdymass = mean(body_mass_g))
penguins %>%
group_by(island) %>%
summarize(mean_bdymass = mean(body_mass_g, na.rm= T))
penguins %>%
group_by(island) %>%
summarize(mean_bdymass = mean(body_mass_g, na.rm= T))
#There are some missing data points.
penguins %>%
group_by(island) %>%
summarize(mean_bdymass = mean(body_mass_g, na.rm= T))
penguins %>%
filter(!is.na(body_mass_g)) %>%
group_by(island)
penguins %>%
filter(!is.na(body_mass_g)) %>%
group_by(island) %>%
summarise(mean_bdy_mass = mean(body_mass_g))
names(penguins)
penguins %>%
filter(!is.na(body_mass_g)) %>%
group_by(island) %>%
summarise(mean_bdy_mass = mean(body_mass_g),
sd_bdy_mass_g = sd(body_mass_g))
`count()` is an easy way of determining how many observations you have within a column. It acts like a combination of `group_by()` and `n()`.
penguins %>%
count(island, sort = T) #sort=T sorts the column in descending order
penguins %>%
count(species, sort = T)
penguins %>%
count((species, sort = T),
penguins %>%
count(species, sort = T) %>%
count(island,sort = T)
penguins %>%
group_by(island) %>%
summarize(n=n())
penguins %>%
count(island, species, sort = T) # sort=T will arrange in descending order
penguins %>%
tabyl(island, species)
penguins %>%
tabyl(species, island) %>%
adorn_percentages() %>%
adorn_pct_formatting(digits = 2)
install.packages("palmerpenguins")
install.packages("skimr")
## Load the libraries
```{r message=FALSE, warning=FALSE}
library("tidyverse")
library("janitor")
library("skimr")
library("palmerpenguins")
glimpse(penguins)
penguins %>%
group_by(island) %>%
summarize(mean_bdymass = mean(body_mass_g, na.rm= T))
#There are some missing data points.
penguins %>%
group_by(island) %>%
summarize(mean_bdymass = mean(body_mass_g, na.rm= T))
penguins %>%
filter(!is.na(body_mass_g)) %>%
group_by(island) %>%
summarise(mean_bdy_mass = mean(body_mass_g),
sd_bdy_mass_g = sd(body_mass_g))
names(penguins)
penguins %>%
count(species, sort = T) %>%
count(island, sort = T)
penguins %>%
count(species, sort = T) %>%
count(island, sort = T)
penguins %>%
count(species, sort = T) %>%
count(island, sort = T)
penguins %>%
count(island, sort = T) #sort=T sorts the column in descending order
penguins %>%
group_by(island) %>%
summarize(n=n())
penguins %>%
count(island, species, sort = T) # sort=T will arrange in descending order
penguins %>%
tabyl(island, species)
penguins %>%
tabyl(species, island) %>%
adorn_percentages() %>%
adorn_pct_formatting(digits = 2)
?adorn_pct_formatting
penguins %>%
filter(Adelie)
penguins %>%
filter(adelie)
glimpse(penguins)
penguins %>%
filter(species == Adelie)
penguins %>%
filter(species == "Adelie")
penguins %>%
filter(species == "Adelie") %>%
summarize(mean_bill_length = mean(bill_length_mm))
penguins %>%
filter(species == "Adelie") %>%
summarize(mean_bill_length = mean(bill_length_mm, na.rm=T))
penguins %>%
filter(species == "Adelie") %>%
summarize(mean_bill_length = mean(bill_length_mm, na.rm=T),
mean_bill_depth = mean(bill_depth_mm, na.rm =T),
mean_flipper_length = mean(flipper_length_mm, na.rm = T),
mean_body_mass = mean(body_mass_g, na.rm = T),
total=n())
penguins %>%
group_by(species) %>%
mean(bill_length_mm)
penguins %>%
group_by(species) %>%
mean(bill_length_mm, na.rm = T)
penguins %>%
group_by(species) %>%
mean(bill_length_mm, na.rm = T)
penguins %>%
group_by(species, bill_length_mm) %>%
mean(bill_length_mm, na.rm = T)
penguins %>%
group_by(species, bill_length_mm) %>%
mean(bill_length_mm, na.rm = T)
penguins %>%
group_by(species, bill_length_mm) %>%
mean(bill_length_mm, na.rm = T)
penguins %>%
group_by(species, bill_length_mm)
penguins %>%
group_by(species)
penguins %>%
tabyl(species)
group_by(species)
penguins %>%
tabyl(species) %>%
mean(bill_length_mm, na.rm = T)
msleep %>%
group_by(vore) %>% #we are grouping by feeding ecology, a categorical variable
summarize(min_bodywt = min(bodywt),
max_bodywt = max(bodywt),
mean_bodywt = mean(bodywt),
total=n())
penguins %>%
group_by(species) %>%
summarize(mean_bill_length_mm = mean(bill_length_mm))
penguins %>%
group_by(species) %>%
summarize(mean_bill_length_mm = mean(bill_length_mm, na.rm = T))
penguins %>%
group_by(sex)
penguins %>%
filter(species == "Adelie") %>%
select(bill_length_mm,bill_depth_mm, flipper_length_mm, body_mass_g) %>%
summarize(mean_bill_length = mean(bill_length_mm, na.rm=T),
mean_bill_depth = mean(bill_depth_mm, na.rm =T),
mean_flipper_length = mean(flipper_length_mm, na.rm = T),
mean_body_mass = mean(body_mass_g, na.rm = T),
total=n())
penguins %>%
count(sex, island)
3. For some penguins, their sex is listed as NA. Where do these penguins occur?
What if we wanted to apply summarize in order to produce distinct counts over multiple variables; i.e. species, island, and sex? Although this isn't a lot of coding you can image that with a lot of variables it would be cumbersome.
What if we wanted to apply summarize in order to produce distinct counts over multiple variables; i.e. species, island, and sex? Although this isn't a lot of coding you can image that with a lot of variables it would be cumbersome.
penguins %>%
summarize(distinct_species = n_distinct(species),
distinct_island = n_distinct(island),
distinct_sex = n_distinct(sex))
names(penguins)
penguins %>%
summarize(across(c(species, island, sex), n_distinct))
penguins %>%
summarize(across(contains("mm"), mean, na.rm=T))
penguins %>%
group_by(sex) %>%
summarize(across(contains("mm"), mean, na.rm=T))
penguins %>%
summarise_all(mean, na.rm=T)
Operators can also work, here I am summarizing across all variables except `species`, `island`, `sex`, and `year`.
penguins %>%
summarise(across(!c(species, island, sex, year),
mean, na.rm=T))
penguins %>%
group_by(species) %>%
select(bill_length_mm, bill_depth_mm, flipper_length_mm) %>%
summarise(across(ends_with("mm"), mean, na.rm=T),
total=n()) %>%
summarise(across(ends_with("mm"), sd, na.rm = T),
total=n())
penguins %>%
group_by(species) %>%
select(bill_length_mm, bill_depth_mm, flipper_length_mm) %>%
summarise(across(contains("mm"), mean, na.rm=T),
total=n())
penguins %>%
group_by(species) %>%
summarise(across(contains("mm"), mean, na.rm=T),
total=n())
penguins %>%
group_by(species) %>%
summarise(across(contains("mm"), sd, na.rm=T),
total=n())
knitr::opts_chunk$set(echo = TRUE)
### how to change classes efficiently when wanting to change all of one class into another class
mammals %>% mutate_if(is.character, as.factor)
#mammals %>%
#select(genus, species, newborn) %>%
#mutate(newborn_new = ifelse(newborn == -999.00, NA, newborn))%>%
#arrange(newborn)
```
